// <auto-generated />
using System;
using AirCesiModel.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirCesiModel.Migrations
{
    [DbContext(typeof(AirCesiContext))]
    partial class AirCesiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AeroportVille", b =>
                {
                    b.Property<int>("AeroportsId")
                        .HasColumnType("int");

                    b.Property<int>("VillesId")
                        .HasColumnType("int");

                    b.HasKey("AeroportsId", "VillesId");

                    b.HasIndex("VillesId");

                    b.ToTable("AeroportVille");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Aeroport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Aeroports");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Compagnie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Compagnies");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Personne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Personnes");

                    b.HasDiscriminator().HasValue("Personne");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AirCesiModel.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Annulation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Confirmation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PassagerId")
                        .HasColumnType("int");

                    b.Property<int>("VolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PassagerId");

                    b.HasIndex("VolId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Ville", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Villes");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Vol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AeroportArriveeId")
                        .HasColumnType("int");

                    b.Property<int>("AeroportDepartId")
                        .HasColumnType("int");

                    b.Property<int>("CompagnieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateArrivee")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateDepart")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EstOuvert")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("VolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AeroportArriveeId");

                    b.HasIndex("AeroportDepartId");

                    b.HasIndex("CompagnieId");

                    b.HasIndex("VolId");

                    b.ToTable("Vols");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Client", b =>
                {
                    b.HasBaseType("AirCesiModel.Entities.Personne");

                    b.Property<int>("NoCompte")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Passager", b =>
                {
                    b.HasBaseType("AirCesiModel.Entities.Personne");

                    b.Property<string>("Passeport")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasDiscriminator().HasValue("Passager");
                });

            modelBuilder.Entity("AeroportVille", b =>
                {
                    b.HasOne("AirCesiModel.Entities.Aeroport", null)
                        .WithMany()
                        .HasForeignKey("AeroportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCesiModel.Entities.Ville", null)
                        .WithMany()
                        .HasForeignKey("VillesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirCesiModel.Entities.Reservation", b =>
                {
                    b.HasOne("AirCesiModel.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCesiModel.Entities.Passager", "Passager")
                        .WithMany()
                        .HasForeignKey("PassagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCesiModel.Entities.Vol", "Vol")
                        .WithMany("Reservations")
                        .HasForeignKey("VolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Passager");

                    b.Navigation("Vol");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Vol", b =>
                {
                    b.HasOne("AirCesiModel.Entities.Aeroport", "AeroportArrivee")
                        .WithMany("VolArrivees")
                        .HasForeignKey("AeroportArriveeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCesiModel.Entities.Aeroport", "AeroportDepart")
                        .WithMany("VolDeparts")
                        .HasForeignKey("AeroportDepartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCesiModel.Entities.Compagnie", "Compagnie")
                        .WithMany("Vols")
                        .HasForeignKey("CompagnieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCesiModel.Entities.Vol", null)
                        .WithMany("Escales")
                        .HasForeignKey("VolId");

                    b.Navigation("AeroportArrivee");

                    b.Navigation("AeroportDepart");

                    b.Navigation("Compagnie");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Aeroport", b =>
                {
                    b.Navigation("VolArrivees");

                    b.Navigation("VolDeparts");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Compagnie", b =>
                {
                    b.Navigation("Vols");
                });

            modelBuilder.Entity("AirCesiModel.Entities.Vol", b =>
                {
                    b.Navigation("Escales");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
