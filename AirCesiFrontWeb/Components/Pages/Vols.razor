@page "/vols"
@rendermode InteractiveServer

@using AirCesiFrontWeb.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using AirCesiFrontWeb.ModelDtos
@inject ApiService ApiService

<PageTitle>Vols</PageTitle>

<h1>Liste des vols ouverts</h1>

<input type="date" @bind="dateFilter" @oninput="OnDateChange" />

<div>
<QuickGrid ItemsProvider="volsRecallProvider" Class="table" Pagination="pagination">
    <PropertyColumn Property="voldto => voldto.CompagnieName" Title="Compagnie" />
    <PropertyColumn Property="voldto => voldto.DateDepart" Title="Départ"  />
    <PropertyColumn Property="voldto => voldto.AeroportDepart" Title="De l'aéroport"  />
    <PropertyColumn Property="voldto => voldto.DateArrivee" Title="Arrivée" />
    <PropertyColumn Property="voldto => voldto.AeroportArrivee" Title="A l'aéroport" />
</QuickGrid>
</div>

@code {

    private DateTime dateFilter = DateTime.Now;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 3 };

    private GridItemsProvider<VolDto>? volsRecallProvider;

    protected override async Task OnInitializedAsync()
    {
        volsRecallProvider = async req =>
        {
            var vols = await ApiService.SearchVols(dateFilter);
            vols = vols.OrderBy(v => v.DateDepart).ToList();

            return GridItemsProviderResult.From(
                items: vols,
                totalItemCount: vols.Count());
        };
    }


    private async Task OnDateChange(ChangeEventArgs e)
    {
        var newDate = DateTime.Parse(e.Value.ToString());
        if (newDate != dateFilter)
        {
            dateFilter = newDate;
            await pagination.SetCurrentPageIndexAsync(0);
            await InvokeAsync(StateHasChanged);
        }
    }
}
